### This file was autogenerated by Nexus 0.10.0
### Do not make changes to this file directly


type AggregateProduct {
  count: Int!
}

type BatchPayload {
  count: Long!
}

scalar Long

type Mutation {
  createProduct(data: ProductCreateInput!): Product!
  deleteManyProducts(where: ProductWhereInput): BatchPayload!
  deleteProduct(where: ProductWhereUniqueInput!): Product
  updateManyProducts(data: ProductUpdateManyMutationInput!, where: ProductWhereInput): BatchPayload!
  updateProduct(data: ProductUpdateInput!, where: ProductWhereUniqueInput!): Product
  upsertProduct(create: ProductCreateInput!, update: ProductUpdateInput!, where: ProductWhereUniqueInput!): Product!
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

type Product {
  country: String
  id: ID!
  name: String
  price: Int
}

type ProductConnection {
  aggregate: AggregateProduct!
  edges: [ProductEdge!]!
  pageInfo: PageInfo!
}

input ProductCreateInput {
  country: String
  name: String
  price: Int
}

type ProductEdge {
  cursor: String!
  node: Product!
}

enum ProductOrderByInput {
  country_ASC
  country_DESC
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  price_ASC
  price_DESC
}

input ProductUpdateInput {
  country: String
  name: String
  price: Int
}

input ProductUpdateManyMutationInput {
  country: String
  name: String
  price: Int
}

input ProductWhereInput {
  AND: [ProductWhereInput!]
  country: String
  country_contains: String
  country_ends_with: String
  country_gt: String
  country_gte: String
  country_in: [String!]
  country_lt: String
  country_lte: String
  country_not: String
  country_not_contains: String
  country_not_ends_with: String
  country_not_in: [String!]
  country_not_starts_with: String
  country_starts_with: String
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  name: String
  name_contains: String
  name_ends_with: String
  name_gt: String
  name_gte: String
  name_in: [String!]
  name_lt: String
  name_lte: String
  name_not: String
  name_not_contains: String
  name_not_ends_with: String
  name_not_in: [String!]
  name_not_starts_with: String
  name_starts_with: String
  price: Int
  price_gt: Int
  price_gte: Int
  price_in: [Int!]
  price_lt: Int
  price_lte: Int
  price_not: Int
  price_not_in: [Int!]
}

input ProductWhereUniqueInput {
  id: ID
}

type Query {
  product(where: ProductWhereUniqueInput!): Product
  products(after: String, before: String, first: Int, last: Int, orderBy: ProductOrderByInput, skip: Int, where: ProductWhereInput): [Product!]!
  productsConnection(after: String, before: String, first: Int, last: Int, orderBy: ProductOrderByInput, skip: Int, where: ProductWhereInput): ProductConnection!
}
